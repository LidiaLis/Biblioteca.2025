/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package aplicacao;

import dao.EmprestimoDAO;
import dao.EmprestimoDAOJDBC;
import dao.LivroDAO;
import dao.LivroDAOJDBC;
import dao.UsuarioDAO;
import dao.UsuarioDAOJDBC;
import java.text.ParseException;
import java.util.Date;
import javax.swing.JOptionPane;
import modelo.Emprestimo;
import modelo.Usuario;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import modelo.Livro;


/**
 *
 * @author Lídia Lis
 */
public class DialogEmprestimo extends javax.swing.JDialog {
        
    /**
     * Creates new form DialogInserir
     *
     */
    
public enum Modo {
        INSERIR,
        EDITAR,
        DEVOLVER
    }

    private Emprestimo emprestimoSelecionado;
    private final Modo modoAtual;

    public DialogEmprestimo(java.awt.Frame parent, boolean modal, Modo modo, Integer idEmprestimo) {
        super(parent, modal);
        this.modoAtual = modo;

        initComponents();
        setLocationRelativeTo(parent);

        if (idEmprestimo != null) {
            EmprestimoDAO dao = new EmprestimoDAOJDBC();
            emprestimoSelecionado = dao.buscaPorId(idEmprestimo);

            if (emprestimoSelecionado != null) {
                preencherCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Empréstimo não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

        configurarBotoes();
    }

    private void configurarBotoes() {
    switch (modoAtual) {
        case INSERIR:
            btnInserirSalva.setText("Inserir");
            ftxtData2.setEnabled(false); // data devolução desabilitada ao inserir
            break;

        case EDITAR:
            btnInserirSalva.setText("Salvar Alterações");
            ftxtData.setEnabled(true);
            ftxtData1.setEnabled(true);
            ftxtData2.setEnabled(true); // Habilita data devolução para edição
            break;

        case DEVOLVER:
            btnInserirSalva.setText("Registrar Devolução");
            ftxtData.setEnabled(false);
            ftxtData1.setEnabled(false);
            ftxtData2.setEnabled(true);
            break;
    }
}


    private void preencherCampos() {
    if (emprestimoSelecionado != null) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        if (modoAtual == Modo.EDITAR) {
            // Preenche empréstimo e data prevista
            if (emprestimoSelecionado.getData_emprestimo() != null) {
                ftxtData.setText(sdf.format(emprestimoSelecionado.getData_emprestimo()));
            }
            if (emprestimoSelecionado.getData_prevista() != null) {
                ftxtData1.setText(sdf.format(emprestimoSelecionado.getData_prevista()));
            }

            // Seleciona o livro
            Livro livro = emprestimoSelecionado.getId_livro();
            if (livro != null) {
                cbTitulo.setSelectedItem(livro);
            }

            // Seleciona o leitor
            Usuario usuario = emprestimoSelecionado.getId_usuario();
            if (usuario != null) {
                cbUsuario.setSelectedItem(usuario);
            }

        } else if (modoAtual == Modo.DEVOLVER) {
            // Para devolução, normalmente só mostra a data de devolução
            if (emprestimoSelecionado.getData_devolucao() != null) {
                ftxtData2.setText(sdf.format(emprestimoSelecionado.getData_devolucao()));
            }
            cbTitulo.setEnabled(false);
            cbUsuario.setEnabled(false);
            ftxtData.setEnabled(false);
            ftxtData1.setEnabled(false);
        }
    }
}
  
    
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ftxtData = new javax.swing.JFormattedTextField();
        btnInserirSalva = new javax.swing.JButton();
        cbTitulo = new javax.swing.JComboBox<>();
        cbUsuario = new javax.swing.JComboBox<>();
        ftxtData1 = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        ftxtData2 = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 244));

        jPanel5.setBackground(new java.awt.Color(0, 153, 204));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jLabel2.setText("Nome do Leitor: ");

        jLabel8.setText("Título: ");

        jLabel11.setText("Data de Emprestimo: ");

        try {
            ftxtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftxtDataActionPerformed(evt);
            }
        });

        btnInserirSalva.setText("Salvar");
        btnInserirSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirSalvaActionPerformed(evt);
            }
        });

        cbTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTituloActionPerformed(evt);
            }
        });

        cbUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUsuarioActionPerformed(evt);
            }
        });

        try {
            ftxtData1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftxtData1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Data de Prevista: ");

        try {
            ftxtData2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel14.setText("Data de Devolução: ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInserirSalva)
                .addGap(68, 68, 68))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ftxtData, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ftxtData2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ftxtData1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(158, 158, 158))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(ftxtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(ftxtData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(ftxtData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(btnInserirSalva)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
    DefaultComboBoxModel<Usuario> modeloLeitores = new DefaultComboBoxModel<>();
    UsuarioDAO usuarioDAO = new UsuarioDAOJDBC();
    for (Usuario u : usuarioDAO.listar()) {
        modeloLeitores.addElement(u);
    }
    cbUsuario.setModel(modeloLeitores);

    DefaultComboBoxModel<Livro> modeloLivro = new DefaultComboBoxModel<>();
    LivroDAO livroDAO = new LivroDAOJDBC();
    EmprestimoDAO emprestimoDAO = new EmprestimoDAOJDBC();

    List<Livro> todosOsLivros = livroDAO.listar();
    List<Emprestimo> emprestimos = emprestimoDAO.listar();

    for (Livro livro : todosOsLivros) {
        boolean estaEmprestado = false;
        for (Emprestimo emp : emprestimos) {
            if (emp.getId_livro().getId_livro() == livro.getId_livro()
                    && emp.getStatus() == Emprestimo.StatusEmprestimo.EMPRESTADO) {
                estaEmprestado = true;
                break;
            }
        }
        if (!estaEmprestado) {
            modeloLivro.addElement(livro); 
        }
    }

    if (modoAtual == Modo.INSERIR) {
        if (modeloLivro.getSize() == 0) {
            cbTitulo.setEnabled(false);
            JOptionPane.showMessageDialog(this,
                "Todos os livros estão emprestados no momento.",
                "Aviso",
                JOptionPane.INFORMATION_MESSAGE);
                dispose();
        } else {
            cbTitulo.setModel(modeloLivro);
            cbTitulo.setEnabled(true);
        }
    } else if (modoAtual == Modo.EDITAR) {
        DefaultComboBoxModel<Livro> modeloLivroEditar = new DefaultComboBoxModel<>();
        modeloLivroEditar.addElement(emprestimoSelecionado.getId_livro());
        cbTitulo.setModel(modeloLivroEditar);
        cbTitulo.setSelectedIndex(0); // garante que o livro esteja selecionado
        cbTitulo.setEnabled(false); 
        ftxtData2.setEnabled(false);
    } else {
        // Modo DEVOLVER continua como antes
        cbTitulo.setModel(modeloLivro);
        cbTitulo.setEnabled(true);
    }
    
    }//GEN-LAST:event_formWindowGainedFocus

    private void cbUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbUsuarioActionPerformed

    private void cbTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTituloActionPerformed

    private void btnInserirSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirSalvaActionPerformed
    
try {
        EmprestimoDAO dao = new EmprestimoDAOJDBC();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false);

        switch (modoAtual) {
            case INSERIR: {
                String dataEmprestimoTexto = ftxtData.getText().trim();
                String dataPrevistaTexto = ftxtData1.getText().trim();
                String dataDevolucaoTexto = ftxtData2.getText().trim();

                dataDevolucaoTexto= "";
                if (dataEmprestimoTexto.contains("_") || dataPrevistaTexto.contains("_")) {
                    JOptionPane.showMessageDialog(this, "Preencha todas as datas corretamente.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Date dataEmprestimo, dataPrevista;
                try {
                    dataEmprestimo = sdf.parse(dataEmprestimoTexto);
                    dataPrevista = sdf.parse(dataPrevistaTexto);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(this, "Datas inválidas. Use formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (dataEmprestimo.after(new Date())) {
                    JOptionPane.showMessageDialog(this, "A data de empréstimo não pode ser futura!", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (dataPrevista.before(dataEmprestimo)) {
                    JOptionPane.showMessageDialog(this, "A data prevista deve ser após a data de empréstimo.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Usuario usuarioSelecionado = (Usuario) cbUsuario.getSelectedItem();
                Livro livroSelecionado = (Livro) cbTitulo.getSelectedItem();

                if (usuarioSelecionado == null || livroSelecionado == null) {
                    JOptionPane.showMessageDialog(this, "Selecione um leitor e um livro válidos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Emprestimo novo = new Emprestimo();
                novo.setData_emprestimo(dataEmprestimo);
                novo.setData_prevista(dataPrevista);
                novo.setData_devolucao(null);
                novo.setId_usuario(usuarioSelecionado);
                novo.setId_livro(livroSelecionado);
                novo.setStatus(Emprestimo.StatusEmprestimo.EMPRESTADO);
                


                int sucesso = dao.inserir(novo);
                if (sucesso > 0) {
                    JOptionPane.showMessageDialog(this, "Empréstimo registrado com sucesso!");
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao registrar empréstimo.");
                }
                break;
            }

            case EDITAR: {
                String dataEmprestimoTexto = ftxtData.getText().trim();
                String dataPrevistaTexto = ftxtData1.getText().trim();

                if (dataEmprestimoTexto.contains("_") || dataPrevistaTexto.contains("_")) {
                    JOptionPane.showMessageDialog(this, "Preencha todas as datas corretamente.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Date dataEmprestimo, dataPrevista, dataDevolucao = null;
                try {
                    dataEmprestimo = sdf.parse(dataEmprestimoTexto);
                    dataPrevista = sdf.parse(dataPrevistaTexto);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(this, "Datas inválidas. Use formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Usuario usuarioSelecionado = (Usuario) cbUsuario.getSelectedItem();
                Livro livroSelecionado = (Livro) cbTitulo.getSelectedItem();

                if (usuarioSelecionado == null || livroSelecionado == null) {
                    JOptionPane.showMessageDialog(this, "Selecione um leitor e um livro válidos.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (dataDevolucao != null && dataDevolucao.before(dataEmprestimo)) {
                    JOptionPane.showMessageDialog(this,
                        "A data de devolução deve ser igual ou posterior à data de empréstimo.",
                        "Erro de data",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                emprestimoSelecionado.setData_emprestimo(dataEmprestimo);
                emprestimoSelecionado.setData_prevista(dataPrevista);
                emprestimoSelecionado.setId_usuario(usuarioSelecionado);
                emprestimoSelecionado.setId_livro(livroSelecionado);
                emprestimoSelecionado.setData_devolucao(dataDevolucao);

                // Reavaliar status baseado na data_devolucao e data_prevista
                if (dataDevolucao == null) {
                    emprestimoSelecionado.setStatus(Emprestimo.StatusEmprestimo.EMPRESTADO);
                } else {
                    if (dataDevolucao.after(dataPrevista)) {
                        emprestimoSelecionado.setStatus(Emprestimo.StatusEmprestimo.ATRASADO);
                    } else {
                        emprestimoSelecionado.setStatus(Emprestimo.StatusEmprestimo.DEVOLVIDO);
                    }
                }

                int sucesso = dao.editar(emprestimoSelecionado);
                if (sucesso > 0) {
                    JOptionPane.showMessageDialog(this, "Empréstimo atualizado com sucesso!");
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar empréstimo.");
                }
                break;
            }

            case DEVOLVER: {
                String dataDevolucaoTexto = ftxtData2.getText().trim();

                if (dataDevolucaoTexto.contains("_")) {
                    JOptionPane.showMessageDialog(this, "Preencha a data de devolução corretamente.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Date dataDevolucao;
                try {
                    dataDevolucao = sdf.parse(dataDevolucaoTexto);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(this, "Data de devolução inválida. Use formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validação: devolução não pode ser antes do empréstimo
                Date dataEmprestimo = emprestimoSelecionado.getData_emprestimo();
                if (dataEmprestimo != null && dataDevolucao.before(dataEmprestimo)) {
                    JOptionPane.showMessageDialog(this,
                        "A data de devolução deve ser igual ou posterior à data de empréstimo.",
                        "Erro de data",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                emprestimoSelecionado.setData_devolucao(dataDevolucao);

                Date dataPrevista = emprestimoSelecionado.getData_prevista();
                if (dataDevolucao.after(dataPrevista)) {
                    long atrasoDias = (dataDevolucao.getTime() - dataPrevista.getTime()) / (1000 * 60 * 60 * 24);
                    emprestimoSelecionado.setStatus(Emprestimo.StatusEmprestimo.ATRASADO);

                    JOptionPane.showMessageDialog(this,
                            "Devolução registrada.\nAtraso de " + atrasoDias + " dia(s).",
                            "Atenção", JOptionPane.WARNING_MESSAGE);
                } else {
                    emprestimoSelecionado.setStatus(Emprestimo.StatusEmprestimo.DEVOLVIDO);
                    JOptionPane.showMessageDialog(this,
                            "Devolução registrada dentro do prazo!",
                            "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                }

                int sucesso = dao.registrarDevolucao(emprestimoSelecionado);
                if (sucesso > 0) {
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao registrar devolução.");
                }
                break;
            }
            }

    }catch (Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro inesperado: " + e.getMessage());
    }

    }//GEN-LAST:event_btnInserirSalvaActionPerformed

    private void ftxtData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftxtData1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftxtData1ActionPerformed

    private void ftxtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftxtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftxtDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the dialog */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInserirSalva;
    private javax.swing.JComboBox<Livro> cbTitulo;
    private javax.swing.JComboBox<Usuario> cbUsuario;
    private javax.swing.JFormattedTextField ftxtData;
    private javax.swing.JFormattedTextField ftxtData1;
    private javax.swing.JFormattedTextField ftxtData2;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
}
